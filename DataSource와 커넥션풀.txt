커넥션 풀 이해
	
	데이터베이스 커넥션을 획득할 때는 다음과 같은 복잡한 과정을 거친다.
	
	1. 애플리케이션 로직은 DB 드라이버를 통해 커넥션을 조회한다.
	2. DB 드라이버는 DB와 TCPI/IP 커넥션을 연결한다. 물론 이 과정에서 3 way handshake 같은 TCP/IP 연결을 위한 네트워크 동작이 발생한다.
	3. DB 드라이버는 DB와 TCP/IP 커넥션이 연결되면 ID, PW와 기타 부가정보를 DB에 전달한다.
	4. DB는 ID,PW를 통해 내부 인증을 완료하고, 내부에 DB세션을 생성한다.
	5. DB는 커넥션 생성이 완료되었다는 응답을 보낸다.
	6. DB 드라이버는 커넥션 객체를 생성해서 클라이언트에 반환한다.
	
	
	이렇게 커넥션을 새로 만드는 것은 과정도 복잡하고 시간도 많이 많이 소모되는 일이다.
	DB는 물론이고 애플리케이션 서버에서도 TCP/IP 커넥션을 새로 생성하기 위한 리소스를 매번 사용해야 한다.
	진짜 문제는 고객이 애플리케이션을 사용할 때, SQL을 실행하는 시간 뿐만 아니라 커넥션을 새로 만드는 시간이 추가되기 때문에 결과적으로 응답 속도에 영향을 준다.
	
	이런 문제를 해결하는 방법이 미리 커넥션을 생성하고 커넥션풀에 담아두는 것.
	커넥션 풀에 들어 있는 커넥션은 TCP/IP로 DB와 커넥션이 연결되어 있는 상태이기 때문에 언제든지 SQL을 DB에 전달할 수 있다.
	
	사용시 -> 우리는 이제 DB 드라이버를 통해 매번 커넥션을 생성하고 파괴하는 방법이 아닌 커넥션 풀에서 이미 생성되어 있는 커넥션을 가져다 쓰기만 하면 된다.
	커넥션을 사용하면 자원을 해제 시 커넥션을 커넥션 풀에 반환한다.
	
	
DataSource
	
	커넥션을 얻는 방법은 JDBC DriverManager를 직접 사용하거나, 커넥션 풀을 사용하거나 여러가지 방법이 존재
	
	문제는 이런 커넥션을 얻는 방법이 각각의 방법마다 다르다
	-> 이것을 추상화한것이 만든것이 DataSource이다.
	이 인터페이스의 핵심 기능은 커넥션 조회 하나이다. (다른 일부 기능도 있지만 크게 중요하지 않다.)
	
	
	
	
	
	