JDBC 이해
	JDBC 등장 이유
	애플리케이션을 개발할 때 중요한 데이터는 대부분 데이터베이스에 보관한다.
	
	클라이언트가 애플리케이션 서버를 통해 데이터를 저장하거나 조회하면, 애플리케이션 서버는 다음 과정을 통해서 데이터베이스를 사용한다.
	
	1.커넥션 연결 : 주로 TCP/IP를 사용해서 커넥션을 연결한다.
	2.SQL 전달 : 애플리케이션 서버는 DB가 이해할 수 있는 SQL을 연결된 커넥션을 통해 DB에전달한다.
	3.결과응답: DB는 전달된 SQL을 수행하고 그 결과를 응답한다. 애플리케이션 서버는 응답 결과를 활용한다.
	
	
	문제는 각각의 데이터베이스마다 커넥션을 연결하는 방법, SQL을 전달하는 방법, 그리고 결과를 응답받는 방법이 모두 다르다.
	
	큰 문제점은 2가지 있다.
	
	데이터베이스를 다른 종류의 데이터베이스로 변경하면 애플리케이션 서버에 개발된 데이터베이스 사용 코드도 함께 변경해야 한다.
	개발자가 가각의 데이터베이스마다 커넥션 연결 , SQL 전달 , 그리고 그 결과를 응답 받는 방법을 새로 학습해야한다.
	
	문제의 해결 : JDBC 등장
	
	JDBC(Java Database Connectivity)는 자바에서 데이터베이스에 접속할 수 있도록 하는 자바 API다. 
	JDBC는 데이터베이스에서 자료를 쿼리하거나 업데이트하는 방법을 제공한다. - 위키백과
	
	결국 각 벤더에서 제공하는 JDBC 드라이버를 사용한다면 -> 실제 작성된 코드를 변경 할 일이 없다.
	-> 왜냐하면 각 회사는 Java에서 제공하는 JDBC(인터페이스)의 껍데기를 구현한 코드를 제공하기 때문에 어떤 DB로 변경하여도 사용하는 방법은 같다.
	
	
	애플리케이션 로직은 이제 JDBC 표준 인터페이스에만 의존한다. 따라서 데이터베이스를 다른 종류의
	데이터베이스로 변경하고 싶으면 JDBC 구현 라이브러리만 변경하면 된다. 따라서 다른 종류의
	데이터베이스로 변경해도 애플리케이션 서버의 사용 코드를 그대로 유지할 수 있다.
	
	우리는 이제 DB의 커넥션을 호출할 때 DriverManager(JDBC제공)에서 커넥션을 획득하기만 하면 된다.
	DriverManager 는 라이브러리에 등록된 드라이버 목록을 자동으로 인식한다. 이 드라이버들에게
	순서대로 다음 정보를 넘겨서 커넥션을 획득할 수 있는지 확인한다.
	URL: 예) jdbc:h2:tcp://localhost/~/test
	이름, 비밀번호 등 접속에 필요한 추가 정보
	여기서 각각의 드라이버는 URL 정보를 체크해서 본인이 처리할 수 있는 요청인지 확인한다. 예를
	들어서 URL이 jdbc:h2 로 시작하면 이것은 h2 데이터베이스에 접근하기 위한 규칙이다. 따라서 H2 
	드라이버는 본인이 처리할 수 있으므로 실제 데이터베이스에 연결해서 커넥션을 획득하고 이 커넥션을
	클라이언트에 반환한다. 반면에 URL이 jdbc:h2 로 시작했는데 MySQL 드라이버가 먼저 실행되면
	이 경우 본인이 처리할 수 없다는 결과를 반환하게 되고, 다음 드라이버에게 순서가 넘어간다.
	3. 이렇게 찾은 커넥션 구현체가 클라이언트에 반환된다.
	
	