AopUtils.isAopProxy() : 선언적 트랜잭션 방식에서 스프링 트랜잭션은 AOP를 기반으로 동작한다.
@Transactional 을 메서드나 클래스에 붙이면 해당 객체는 트랜잭션 AOP 적용의 대상이 되고, 
결과적으로 실제 객체 대신에 트랜잭션을 처리해주는 프록시 객체가 스프링 빈에 등록된다. 그리고 주입을
받을 때도 실제 객체 대신에 프록시 객체가 주입된다.

TransactionSynchronizationManager.isActualTransactionActive()
현재 쓰레드에 트랜잭션이 적용되어 있는지 확인할 수 있는 기능이다. 결과가 true 면 트랜잭션이 적용되어
있는 것이다. 트랜잭션의 적용 여부를 가장 확실하게 확인할 수 있다.


@Transactional 우선순위 -> 스프링에서는 항상 더 구체적이고 자세한 것이 높은 우선순위를 가진다.

@Transactional
public class Test{
	
	// 메서드가 우선순위가 더 높다 이유는 더 구체적이니까!
	@Transactional
	public void testTran(){
	
	}
}

스프링의 @Transactional 은 다음 두 가지 규칙이 있다.
1. 우선순위 규칙
2. 클래스에 적용하면 메서드는 자동 적용

트랜잭션 AOP 주의사항 -> 스프링 고급편 AOP에서 나오는 내부호출 문제와 같다.

@PostConstruct ---> 스프링 빈을 초기화할 때 수행해야 하는 작업이 있으면 넣는 어노테이션
이때는 빈의 후처리 작업이 끝나지 않아서 , @Transactional 적용이 불가하다 

만약에 사용해야한다면 @EventListener(value = ApplicationReadyEvent.class) 를 사용하자! -> 이 이벤트는 트랜잭션
AOP를 포함한 스프링이 컨테이너가 완전히 생성되고 난 다음에 이벤트가 붙은 메서드를 호출해준다.

스프링에서 트랜잭션은 언체크 예외 -> 롤백 , 체크 예외 -> 커밋.
스프링 기본적으로 체크 예외는 비즈니스 의미가 있을 때 사용하고, 런타임(언체크) 예외는 복구 불가능한
예외로 가정한다







