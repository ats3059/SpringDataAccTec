트랜잭션 이해

	원자성: 트랜잭션 내에서 실행한 작업들은 마치 하나의 작업인 것처럼 모두 성공 하거나 모두 실패해야한다.
	일관성: 모든 트랜잭션은 일관성 있는 데이터베이스 상태를 유지해야 한다. 예를 들어 데이터베이스에서 정한 무결성 제약 조건을 항상 만족해야 한다. 
	격리성: 동시에 실행되는 트랜잭션들이 서로에게 영향을 미치지 않도록 격리한다. 예를 들어 동시에 같은
	데이터를 수정하지 못하도록 해야 한다. 격리성은 동시성과 관련된 성능 이슈로 인해 트랜잭션 격리 수준
	(Isolation level)을 선택할 수 있다. 
	지속성: 트랜잭션을 성공적으로 끝내면 그 결과가 항상 기록되어야 한다. 중간에 시스템에 문제가 발생해도
	데이터베이스 로그 등을 사용해서 성공한 트랜잭션 내용을 복구해야 한다.
	
	트랜잭션 격리 수준 - Isolation level
	READ UNCOMMITED(커밋되지 않은 읽기) 
	READ COMMITTED(커밋된 읽기) 
	REPEATABLE READ(반복 가능한 읽기) 
	SERIALIZABLE(직렬화 가능)
	
애플리케이션의 구조

	프레젠테이션 계층
		UI와 관련된 처리 담당
		웹 요청과 응답
		사용자 요청을 검증
		주 사용 기술: 서블릿과 HTTP 같은 웹 기술, 스프링 MVC
	서비스 계층
		비즈니스 로직을 담당
		주 사용 기술: 가급적 특정 기술에 의존하지 않고, 순수 자바 코드로 작성
	데이터 접근 계층
		실제 데이터베이스에 접근하는 코드
		주 사용 기술: JDBC, JPA, File, Redis, Mongo ..
		

강의기준 작성된 코드는 JDBC 기술에만 의존한다 -> 그래서 데이터 접근 계층인 Repository에 JDBC 기술을 전부 넣었는데
	Connection con = dataSource.getConnection();
	con.setAutoCommit(false); //트랜잭션 시작
	con.commit(); //성공시 커밋 등등..
 -> 이것에 대한 처리( try - catch connection)가 서비스까지 누수된다
 -> 현재 적용중인 트랜잭션 방법을 JPA로 변경하게 되면 Service 코드를 전부 뒤집어야 한다.
 -> 이것을 해결하기 위해 스프링은 트랜잭션을 추상화 해놨다. 그것이 PlatformTransactionManager 인터페이스이다.
 
	 DataSourceUtils.getConnection() 는 다음과 같이 동작한다.
	트랜잭션 동기화 매니저가 관리하는 커넥션이 있으면 해당 커넥션을 반환한다.
	트랜잭션 동기화 매니저가 관리하는 커넥션이 없는 경우 새로운 커넥션을 생성해서 반환한다
	
	DataSourceUtils.releaseConnection()
	close() 에서 DataSourceUtils.releaseConnection() 를 사용하도록 변경된 부분을 특히 주의해야
	한다. 커넥션을 con.close() 를 사용해서 직접 닫아버리면 커넥션이 유지되지 않는 문제가 발생한다. 이
	커넥션은 이후 로직은 물론이고, 트랜잭션을 종료(커밋, 롤백)할 때 까지 살아있어야 한다.
	DataSourceUtils.releaseConnection() 을 사용하면 커넥션을 바로 닫는 것이 아니다. 
	트랜잭션을 사용하기 위해 동기화된 커넥션은 커넥션을 닫지 않고 그대로 유지해준다.
	트랜잭션 동기화 매니저가 관리하는 커넥션이 없는 경우 해당 커넥션을 닫는다
	
	이제 서비스에서는 트랜잭션 관련하여 JDBC기술의 누수를 극복했다!
	이유는 트랜잭션 매니저를 사용하여 트랜잭션이 시작하면 커넥션을 생성하고 -> 레퍼지토리에서는 DataSourceUtils를 사용하여 지금 현재 쓰레드에서
	트랜잭션 동기화 매니저에 커넥션이 있다면 해당 커넥션을 반환받고 , 없다면 커넥션을 생성하게 변경되었다. -> 이제 서비스 코드는 스프링에서 추상화한 트랜잭션 매니저를 사용한다
	-> 이렇게 하면서 다른 트랜잭션 매니저(구현체)를 사용하더라도 서비스 계층의 코드는 변경하지 않아도 된다.
	
		
		서비스 계층에서 transactionManager.getTransaction() 을 호출해서 트랜잭션을 시작한다.
	2. 트랜잭션을 시작하려면 먼저 데이터베이스 커넥션이 필요하다. 트랜잭션 매니저는 내부에서 데이터소스를
	사용해서 커넥션을 생성한다.
	3. 커넥션을 수동 커밋 모드로 변경해서 실제 데이터베이스 트랜잭션을 시작한다.
	4. 커넥션을 트랜잭션 동기화 매니저에 보관한다.
	5. 트랜잭션 동기화 매니저는 쓰레드 로컬에 커넥션을 보관한다. 따라서 멀티 쓰레드 환경에 안전하게
	커넥션을 보관할 수 있다
	6. 서비스는 비즈니스 로직을 실행하면서 리포지토리의 메서드들을 호출한다. 이때 커넥션을 파라미터로
	전달하지 않는다.
	7. 리포지토리 메서드들은 트랜잭션이 시작된 커넥션이 필요하다. 리포지토리는
	DataSourceUtils.getConnection() 을 사용해서 트랜잭션 동기화 매니저에 보관된 커넥션을 꺼내서
	사용한다. 이 과정을 통해서 자연스럽게 같은 커넥션을 사용하고, 트랜잭션도 유지된다.
	8. 획득한 커넥션을 사용해서 SQL을 데이터베이스에 전달해서 실행한다
	9. 비즈니스 로직이 끝나고 트랜잭션을 종료한다. 트랜잭션은 커밋하거나 롤백하면 종료된다.
	10. 트랜잭션을 종료하려면 동기화된 커넥션이 필요하다. 트랜잭션 동기화 매니저를 통해 동기화된 커넥션을
	획득한다.
	11. 획득한 커넥션을 통해 데이터베이스에 트랜잭션을 커밋하거나 롤백한다.
	12. 전체 리소스를 정리한다.
	트랜잭션 동기화 매니저를 정리한다. 쓰레드 로컬은 사용후 꼭 정리해야 한다.
	con.setAutoCommit(true) 로 되돌린다. 커넥션 풀을 고려해야 한다.
	con.close() 를 호출해셔 커넥션을 종료한다. 커넥션 풀을 사용하는 경우 con.close() 를
	호출하면 커넥션 풀에 반환된다
	
	
	
	데이터소스 - 자동 등록
		스프링 부트는 데이터소스( DataSource )를 스프링 빈에 자동으로 등록한다.
		자동으로 등록되는 스프링 빈 이름: dataSource
		참고로 개발자가 직접 데이터소스를 빈으로 등록하면 스프링 부트는 데이터소스를 자동으로 등록하지
		않는다.
		이때 스프링 부트는 다음과 같이 application.properties 에 있는 속성을 사용해서 DataSource 를
		생성한다. 그리고 스프링 빈에 등록한다.
		
		application.properties
			spring.datasource.url=jdbc:h2:tcp://localhost/~/test
			spring.datasource.username=sa
			spring.datasource.password=
		스프링 부트가 기본으로 생성하는 데이터소스는 커넥션풀을 제공하는 HikariDataSource 이다. 
		커넥션풀과 관련된 설정도 application.properties 를 통해서 지정할 수 있다.
		spring.datasource.url 속성이 없으면 내장 데이터베이스(메모리 DB)를 생성하려고 시도한다.